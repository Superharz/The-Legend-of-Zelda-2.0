package Editor;

import Editor.Costume.NewEvent;
import Editor.Costume.NewSpot;
import Editor.Costume.NewItem;
import Editor.Costume.NewEnemie;
import Events.Event;
import Game.Spot;
import Game.Engine;
import IOUtil.Serialize;
import Inventory.Items;
import Moveable.Enemies.Enemie;
import Tools.ReadWriteTextFileWithEncoding;
import java.awt.Dimension;
import java.awt.Point;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JInternalFrame;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileFilter;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;

/**
 * This is the main Game-Editor Class which contains the whole GUI and all its
 * functions
 *
 * @author Florian Harz
 */
public class GameMaker extends javax.swing.JFrame {

    public static final int EVENTS = 1, ENEMIES = 2, ITEMS = 3, SPOTS = 0;
    int selection = SPOTS;
    String gameName = "My_Game";

    /**
     * Creates new form GameMaker Sets up the default Map
     */
    public GameMaker() {
        initComponents();
        setUP();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form GameMaker.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jDesktopPane2 = new javax.swing.JDesktopPane();
        LaunchTab = new javax.swing.JInternalFrame();
        Launch = new javax.swing.JButton();
        GUI = new javax.swing.JInternalFrame();
        map1 = new Editor.MapEditor();
        Content = new javax.swing.JInternalFrame();
        Tab = new javax.swing.JTabbedPane();
        Spots = new Editor.Content<Spot>();
        jButton5 = new javax.swing.JButton();
        Events = new Editor.Content<Event>();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        Enemies = new Editor.Content<Enemie>();
        jButton6 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        Items = new Editor.Content<Items>();
        jButton7 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        TreeTab = new javax.swing.JInternalFrame();
        jScrollPane1 = new javax.swing.JScrollPane();
        Tree = new javax.swing.JTree();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem4 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenuItem6 = new javax.swing.JMenuItem();
        jMenuItem8 = new javax.swing.JMenuItem();
        jMenuItem5 = new javax.swing.JMenuItem();
        jMenuItem9 = new javax.swing.JMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem7 = new javax.swing.JMenuItem();
        jMenu3 = new javax.swing.JMenu();
        jCheckBoxMenuItem1 = new javax.swing.JCheckBoxMenuItem();
        jCheckBoxMenuItem2 = new javax.swing.JCheckBoxMenuItem();
        jCheckBoxMenuItem3 = new javax.swing.JCheckBoxMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("My_Game");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        LaunchTab.setClosable(true);
        LaunchTab.setDefaultCloseOperation(javax.swing.WindowConstants.HIDE_ON_CLOSE);
        LaunchTab.setMaximizable(true);
        LaunchTab.setResizable(true);
        LaunchTab.setTitle("LAUNCH");
        LaunchTab.setVisible(true);
        LaunchTab.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentHidden(java.awt.event.ComponentEvent evt) {
                LaunchTabComponentHidden(evt);
            }
        });

        Launch.setBackground(new java.awt.Color(255, 255, 51));
        Launch.setFont(new java.awt.Font("Arial Black", 1, 48)); // NOI18N
        Launch.setForeground(new java.awt.Color(255, 102, 102));
        Launch.setText("!LAUNCH!");
        Launch.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        Launch.setDebugGraphicsOptions(javax.swing.DebugGraphics.NONE_OPTION);
        Launch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LaunchActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout LaunchTabLayout = new javax.swing.GroupLayout(LaunchTab.getContentPane());
        LaunchTab.getContentPane().setLayout(LaunchTabLayout);
        LaunchTabLayout.setHorizontalGroup(
            LaunchTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(Launch, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 531, Short.MAX_VALUE)
        );
        LaunchTabLayout.setVerticalGroup(
            LaunchTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(Launch, javax.swing.GroupLayout.DEFAULT_SIZE, 81, Short.MAX_VALUE)
        );

        LaunchTab.setBounds(160, 40, 547, 110);
        jDesktopPane2.add(LaunchTab, javax.swing.JLayeredPane.DEFAULT_LAYER);

        GUI.setMaximizable(true);
        GUI.setResizable(true);
        GUI.setTitle("GUI");
        GUI.setVisible(true);

        map1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                map1MouseClicked(evt);
            }
        });

        javax.swing.GroupLayout GUILayout = new javax.swing.GroupLayout(GUI.getContentPane());
        GUI.getContentPane().setLayout(GUILayout);
        GUILayout.setHorizontalGroup(
            GUILayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(map1, javax.swing.GroupLayout.DEFAULT_SIZE, 424, Short.MAX_VALUE)
        );
        GUILayout.setVerticalGroup(
            GUILayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(map1, javax.swing.GroupLayout.DEFAULT_SIZE, 391, Short.MAX_VALUE)
        );

        GUI.setBounds(290, 150, 440, 420);
        jDesktopPane2.add(GUI, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Content.setClosable(true);
        Content.setDefaultCloseOperation(javax.swing.WindowConstants.HIDE_ON_CLOSE);
        Content.setMaximizable(true);
        Content.setResizable(true);
        Content.setTitle("Content");
        Content.setVisible(true);
        Content.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentHidden(java.awt.event.ComponentEvent evt) {
                ContentComponentHidden(evt);
            }
        });

        Tab.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                TabStateChanged(evt);
            }
        });

        jButton5.setText("New");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });
        Spots.add(jButton5);

        Tab.addTab("Spots", Spots);

        jButton1.setText("New");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        Events.add(jButton1);

        jButton2.setText("Erase");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        Events.add(jButton2);

        Tab.addTab("Events", Events);

        jButton6.setText("New");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });
        Enemies.add(jButton6);

        jButton4.setText("Erase");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });
        Enemies.add(jButton4);

        Tab.addTab("Enemies", Enemies);

        jButton7.setText("New");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });
        Items.add(jButton7);

        jButton3.setText("Erase");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        Items.add(jButton3);

        Tab.addTab("Items", Items);

        javax.swing.GroupLayout ContentLayout = new javax.swing.GroupLayout(Content.getContentPane());
        Content.getContentPane().setLayout(ContentLayout);
        ContentLayout.setHorizontalGroup(
            ContentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(Tab, javax.swing.GroupLayout.DEFAULT_SIZE, 154, Short.MAX_VALUE)
        );
        ContentLayout.setVerticalGroup(
            ContentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(Tab, javax.swing.GroupLayout.DEFAULT_SIZE, 229, Short.MAX_VALUE)
        );

        Content.setBounds(170, 170, 170, 258);
        jDesktopPane2.add(Content, javax.swing.JLayeredPane.DEFAULT_LAYER);

        TreeTab.setClosable(true);
        TreeTab.setDefaultCloseOperation(javax.swing.WindowConstants.HIDE_ON_CLOSE);
        TreeTab.setMaximizable(true);
        TreeTab.setResizable(true);
        TreeTab.setTitle("Files");
        TreeTab.setVisible(true);
        TreeTab.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentHidden(java.awt.event.ComponentEvent evt) {
                TreeTabComponentHidden(evt);
            }
        });

        Tree.setModel(null);
        jScrollPane1.setViewportView(Tree);

        javax.swing.GroupLayout TreeTabLayout = new javax.swing.GroupLayout(TreeTab.getContentPane());
        TreeTab.getContentPane().setLayout(TreeTabLayout);
        TreeTabLayout.setHorizontalGroup(
            TreeTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 171, Short.MAX_VALUE)
        );
        TreeTabLayout.setVerticalGroup(
            TreeTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 281, Short.MAX_VALUE)
        );

        TreeTab.setBounds(10, 190, 187, 310);
        jDesktopPane2.add(TreeTab, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jMenu1.setText("File");

        jMenuItem4.setText("New Game");
        jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem4ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem4);

        jMenuItem2.setText("Open Game");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem2);

        jMenuItem6.setText("Load Map");
        jMenuItem6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem6ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem6);

        jMenuItem8.setText("Save Map");
        jMenuItem8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem8ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem8);

        jMenuItem5.setText("New Map");
        jMenuItem5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem5ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem5);

        jMenuItem9.setText("Compile");
        jMenuItem9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem9ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem9);

        jMenuItem3.setText("Close");
        jMenu1.add(jMenuItem3);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");

        jMenuItem1.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Z, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem1.setText("Undo");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem1);

        jMenuItem7.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Y, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem7.setText("Redo");
        jMenuItem7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem7ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem7);

        jMenuBar1.add(jMenu2);

        jMenu3.setText("View");

        jCheckBoxMenuItem1.setSelected(true);
        jCheckBoxMenuItem1.setText("Launch");
        jCheckBoxMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxMenuItem1ActionPerformed(evt);
            }
        });
        jMenu3.add(jCheckBoxMenuItem1);

        jCheckBoxMenuItem2.setSelected(true);
        jCheckBoxMenuItem2.setText("Content");
        jCheckBoxMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxMenuItem2ActionPerformed(evt);
            }
        });
        jMenu3.add(jCheckBoxMenuItem2);

        jCheckBoxMenuItem3.setSelected(true);
        jCheckBoxMenuItem3.setText("Files");
        jCheckBoxMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxMenuItem3ActionPerformed(evt);
            }
        });
        jMenu3.add(jCheckBoxMenuItem3);

        jMenuBar1.add(jMenu3);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jDesktopPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 759, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jDesktopPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 587, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * This method takes the Game Name as input for the Game that should be
     * opened it than updates the title and the Tree-Viewer
     *
     * @param evt
     */
    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        gameName = JOptionPane.showInputDialog("Game Name:");
        this.setTitle(gameName);
        updateTree();
    }//GEN-LAST:event_jMenuItem2ActionPerformed
    /**
     * This event calls the mapClicked() method to add an Object to the Map
     *
     * @param evt
     */
    private void map1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_map1MouseClicked
        System.out.println("Worked");
        mapCklicked(evt);
    }//GEN-LAST:event_map1MouseClicked
    /**
     * This event let's you create or load a new Spot and adds it to the Content
     *
     * @param evt
     */
    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        String[] options = {"Create new Object", "Choose File"};
        int option = JOptionPane.showOptionDialog(null, "How to create the Object?", "Choose Object", 0, JOptionPane.QUESTION_MESSAGE, null, options, 0);
        if (option != JOptionPane.CLOSED_OPTION) {
            if (option == 0) {
                final NewSpot s = new NewSpot(null, true);
                s.setVisible(true);
                s.addComponentListener(new java.awt.event.ComponentAdapter() {
                    @Override
                    public void componentHidden(java.awt.event.ComponentEvent evt) {
                        Spots.add(s.getSpot());
                        s.dispose();
                    }
                });
            } else {
                Spot s = getObject(Spot.class, "Choose Spot", false);
                if (s == null) {
                    return;
                }
                Spots.add(s);
            }
        }
    }//GEN-LAST:event_jButton5ActionPerformed
    /**
     * This event updates the selected Tab of the Content-Viewer
     * @param evt 
     */
    private void TabStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_TabStateChanged
        selection = Tab.getSelectedIndex();
        System.out.println(selection);
    }//GEN-LAST:event_TabStateChanged
    /**
     * Editor doesn't like me...
     */
    {//GEN-FIRST:event_map1MousePressed
    }//GEN-LAST:event_map1MousePressed
    /**
     * This event "launches" the Map which is opened for testing
     * @param evt 
     */
    private void LaunchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LaunchActionPerformed
        launch();
    }//GEN-LAST:event_LaunchActionPerformed
    /**
     * This event calls the close() method when you try to shut me down :=(
     * @param evt 
     */
    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        close();
    }//GEN-LAST:event_formWindowClosing
    /**
     * This event let's you create or load a new Event and adds it to the Content
     *
     * @param evt
     */
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        String[] options = {"Create new Object", "Choose File"};
        int option = JOptionPane.showOptionDialog(null, "How to create the Object?", "Choose Object", 0, JOptionPane.QUESTION_MESSAGE, null, options, 0);
        if (option != JOptionPane.CLOSED_OPTION) {
            if (option == 0) {
                final NewEvent i = new NewEvent(null, true, Items, Enemies);
                i.setVisible(true);
                i.addComponentListener(new java.awt.event.ComponentAdapter() {
                    @Override
                    public void componentHidden(java.awt.event.ComponentEvent evt) {
                        Events.add(i.getEvent());
                        i.dispose();
                    }
                });
                Tab.add(Items, "Items", ITEMS);
                Tab.add(Enemies, "Enemies", ENEMIES);
            } else {
                Event s = getObject(Event.class, "Choose Event", false);
                if (s == null) {
                    return;
                }
                Events.add(s);
            }
        }
    }//GEN-LAST:event_jButton1ActionPerformed
    /**
     * This event let's you create or load a new Item and adds it to the Content
     *
     * @param evt
     */
    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        String[] options = {"Create new Object", "Choose File"};
        int option = JOptionPane.showOptionDialog(null, "How to create the Object?", "Choose Object", 0, JOptionPane.QUESTION_MESSAGE, null, options, 0);
        if (option != JOptionPane.CLOSED_OPTION) {
            if (option == 0) {
                final NewItem i = new NewItem(null, true);
                i.setVisible(true);
                i.addComponentListener(new java.awt.event.ComponentAdapter() {
                    @Override
                    public void componentHidden(java.awt.event.ComponentEvent evt) {
                        Items.add(i.getItem());
                        i.dispose();
                    }
                });
            } else {
                Items s = getObject(Items.class, "Choose Item", false);
                if (s == null) {
                    return;
                }
                Items.add(s);
            }
        }
    }//GEN-LAST:event_jButton7ActionPerformed
    /**
     * This event let's you create or load a new Enemy and adds it to the Content
     *
     * @param evt
     */
    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        String[] options = {"Create new Object", "Choose File"};
        int option = JOptionPane.showOptionDialog(null, "How to create the Object?", "Choose Object", 0, JOptionPane.QUESTION_MESSAGE, null, options, 0);
        if (option != JOptionPane.CLOSED_OPTION) {
            if (option == 0) {
                final NewEnemie i = new NewEnemie(null, true);
                i.setVisible(true);
                i.addComponentListener(new java.awt.event.ComponentAdapter() {
                    @Override
                    public void componentHidden(java.awt.event.ComponentEvent evt) {
                        Enemies.add(i.getEnemie());
                        i.dispose();
                    }
                });
            } else {
                Enemie s = getObject(Enemie.class, "Choose Enemie", false);
                if (s == null) {
                    return;
                }
                Enemies.add(s);
            }
        }
    }//GEN-LAST:event_jButton6ActionPerformed
    /**
     * Sets the Map to erase the next Enemy that you click on it
     * @param evt 
     */
    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        Enemies.erase();
    }//GEN-LAST:event_jButton4ActionPerformed
    /**
     * Sets the Map to erase the next Item that you click on it
     * @param evt 
     */
    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        Items.erase();
    }//GEN-LAST:event_jButton3ActionPerformed
    /**
     * Sets the Map to erase the next Event that you click on it
     * @param evt 
     */
    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        Events.erase();
    }//GEN-LAST:event_jButton2ActionPerformed
    /**
     * This method lets you select an already existing Map to load
     * @param evt 
     */
    private void jMenuItem6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem6ActionPerformed
        final MapEditor m = getObject(MapEditor.class, "Load Map", true);
        if (m == null) {
            return;
        }
        loadMap(m);
    }//GEN-LAST:event_jMenuItem6ActionPerformed
    /**
     * This method lets you save the actual Map
     * @param evt 
     */
    private void jMenuItem8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem8ActionPerformed
        Editor.Content.save(map1, gameName);
        updateTree();
    }//GEN-LAST:event_jMenuItem8ActionPerformed
    /**
     * Toggles the Visibility of the Launch Tab
     * @param evt 
     */
    private void jCheckBoxMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxMenuItem1ActionPerformed
        LaunchTab.setVisible(!LaunchTab.isVisible());
    }//GEN-LAST:event_jCheckBoxMenuItem1ActionPerformed
    /**
     * Toggles the Visibility of the Content Tab
     * @param evt 
     */
    private void jCheckBoxMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxMenuItem2ActionPerformed
        Content.setVisible(!Content.isVisible());
    }//GEN-LAST:event_jCheckBoxMenuItem2ActionPerformed
    /**
     * Undo the last object that was added to the Map
     * @param evt 
     */
    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        map1.undo();
    }//GEN-LAST:event_jMenuItem1ActionPerformed
    /**
     * Redo the last object that was added to the Map
     * @param evt 
     */
    private void jMenuItem7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem7ActionPerformed
        map1.redo();
    }//GEN-LAST:event_jMenuItem7ActionPerformed
    /**
     * Lets you save the actual Map and creates a new Map
     * @param evt 
     */
    private void jMenuItem5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem5ActionPerformed
        saveMap();
        setUP();
    }//GEN-LAST:event_jMenuItem5ActionPerformed
    /**
     * Creates a new Game with all the folders
     * Sets the GameName and updates the Title and the Tree
     * @param evt 
     */
    private void jMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem4ActionPerformed
        String name = JOptionPane.showInputDialog("Game Name:");
        File f = new File("Games/" + name + "/Original");
        f.mkdirs();
        f = new File("Games/" + name + "/Players/Player1/Save");
        f.mkdirs();
        gameName = name;
        this.setTitle(name);
        updateTree();
    }//GEN-LAST:event_jMenuItem4ActionPerformed
    /**
     * "Compiles" - Makes the Game ready to run
     * Lets you select a Main-Map and writes it together with the GameName 
     * to an ".ini" file in the Game folder
     * @param evt 
     */
    private void jMenuItem9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem9ActionPerformed
        try {
            String mainMap = JOptionPane.showInputDialog("Main Map:");
            if (mainMap.isEmpty()) {
                return;
            }
            File f = new File("Games/" + gameName + "/game.ini");
            ReadWriteTextFileWithEncoding r = new ReadWriteTextFileWithEncoding(f.getAbsolutePath());
            String[] s = {gameName, mainMap};
            r.write(s);
            updateTree();
        } catch (IOException ex) {
            Logger.getLogger(GameMaker.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jMenuItem9ActionPerformed
    /**
     * Toggles the Visibility of the Tree Tab
     * @param evt 
     */
    private void jCheckBoxMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxMenuItem3ActionPerformed
        TreeTab.setVisible(!TreeTab.isVisible());
    }//GEN-LAST:event_jCheckBoxMenuItem3ActionPerformed
    /**
     * Un-checks the check-Box for the Launch Menu-Entry 
     * @param evt 
     */
    private void LaunchTabComponentHidden(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_LaunchTabComponentHidden
        jCheckBoxMenuItem1.setState(false);
    }//GEN-LAST:event_LaunchTabComponentHidden
    /**
     * Un-checks the check-Box for the Content Menu-Entry 
     * @param evt 
     */
    private void ContentComponentHidden(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_ContentComponentHidden
        jCheckBoxMenuItem2.setState(false);
    }//GEN-LAST:event_ContentComponentHidden
    /**
     * Un-checks the check-Box for the Files Menu-Entry 
     * @param evt 
     */
    private void TreeTabComponentHidden(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_TreeTabComponentHidden
        jCheckBoxMenuItem3.setState(false);
    }//GEN-LAST:event_TreeTabComponentHidden

    /**
     * Starts the Editor
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GameMaker.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GameMaker.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GameMaker.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GameMaker.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GameMaker().setVisible(true);

            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JInternalFrame Content;
    private Editor.Content<Enemie> Enemies;
    private Editor.Content<Event> Events;
    private javax.swing.JInternalFrame GUI;
    private Editor.Content<Items> Items;
    private javax.swing.JButton Launch;
    private javax.swing.JInternalFrame LaunchTab;
    private Editor.Content<Spot> Spots;
    private javax.swing.JTabbedPane Tab;
    private javax.swing.JTree Tree;
    private javax.swing.JInternalFrame TreeTab;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItem1;
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItem2;
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItem3;
    private javax.swing.JDesktopPane jDesktopPane2;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JMenuItem jMenuItem6;
    private javax.swing.JMenuItem jMenuItem7;
    private javax.swing.JMenuItem jMenuItem8;
    private javax.swing.JMenuItem jMenuItem9;
    private javax.swing.JScrollPane jScrollPane1;
    private Editor.MapEditor map1;
    // End of variables declaration//GEN-END:variables
    /**
     * Creates a default Map
     */
    public final void setUP() {
        try {
            map1.setUP(20, 20, 5, 5);
            BufferedImage before = ImageIO.read(this.getClass().
                    getResource("/Pictures/tile1.png"));
            Spot s = new Spot(new ImageIcon(before), true);
            map1.setAllSpots(s);
            map1.build();
            map1.setPreferredSize(map1.getDimension());
        } catch (IOException ex) {
            Logger.getLogger(GameMaker.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    /**
     * Shows a JFileChooser to let the user choose a Game-Object
     * @param selection The Text to be displayed on the JFileChooser
     * @param map True, if the Game-Object will be a Map
     * @return The File to the chosen Object, null if nothing was selected
     */
    private File getFile(String selection, boolean map) {
        JFileChooser chooser;
        File f = new File("Content/");
        if (map) {
            f = new File("Games/" + gameName + "/Original");
        }
        chooser = new JFileChooser(f);
        FileFilter filter;
        filter = new FileNameExtensionFilter("Game-File   .she", "she");
        chooser.addChoosableFileFilter(filter);
        chooser.showDialog(null, selection);
        return chooser.getSelectedFile();
    }
    /**
     * A generic method to deSerialize a Game-Object which will be chosen by the
     * user
     * @param <T> The Class-Type of the Game-Object
     * @param data An Instant of the Class-Type Game-Object
     * @param file The message which will be displayed to the user
     * @param map True, it the Game-Object will be a Map
     * @return The selected and deSerialized Game-Object of type T, null if 
     * nothings has been selected
     */
    public <T> T getObject(Class<T> data, String file, boolean map) {
        T clazz;
        File f = getFile(file, map);
        if (f == null) {
            return null;
        }
        clazz = Serialize.xStreamIn(data, f);
        return clazz;
    }
    /**
     * Updates all the Graphics
     * Most of it may be redundant but I don't know which parts aren't D;
     */
    private void update() {
        Spots.validate();
        Spots.repaint();
        map1.validate();
        map1.repaint();
        this.validate();
        this.repaint();
        jDesktopPane2.validate();
        jDesktopPane2.repaint();
        GUI.validate();
        GUI.repaint();
    }
    /**
     * Adds an Game-Object to the Map depending on the Tab selected in the 
     * Content-Object, removes an Object if erase has been selected
     * @param evt The MouseCklic Event which contains the Position
     */
    private void mapCklicked(MouseEvent evt) {
        System.out.println("Selection: " + selection);
        switch (selection) {
            case EVENTS:
                map1.click(evt, Events.getContent(), EVENTS);
                break;
            case ENEMIES:
                map1.click(evt, Enemies.getContent(), ENEMIES);
                break;
            case ITEMS:
                map1.click(evt, Items.getContent(), ITEMS);
                break;
            case SPOTS:
                map1.click(evt, Spots.getContent(), SPOTS);
                break;
        }
        update();
    }
    /**
     * "Launches" the actual Map to you test it
     * The temp File will be removed when you shut me down :=(
     */
    private void launch() {
        Serialize.xStreamOut(map1, "Save\\temp.she");
        File file = new File("Save\\temp.she");
        Engine test = new Engine("Save\\temp.she");
        file.deleteOnExit();
        test.setVisible(true);
        test.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
    }
    /**
     * Saves the actual Map after asking the user to do so
     * Updates the Tree after it
     */
    private void saveMap() {
        int option = JOptionPane.showConfirmDialog(null,
                "Would you like to save the map?", "Save?",
                JOptionPane.YES_NO_CANCEL_OPTION);
        if (option == 2) {
            return;
        }
        if (option == 0) {
            Editor.Content.save(map1, gameName);
            updateTree();
        }
    }
    /**
     * Asks the user to save his map when he shuts me down :=(
     */
    private void close() {
        try {
            saveMap();
        } finally {
            this.dispose();
        }
    }
    /**
     * Updates the File-Tree and adds the Mouse-Events to it
     */
    private void updateTree() {
        FileTree tree = new FileTree();
        Tree.setModel(new DefaultTreeModel(tree.addNodes(null, new File("Games/" + gameName))));
        Tree.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent evt) {
                if (evt.getClickCount() == 2) {
                    treeLoad();
                }
            }
        });
    }
    /**
     * Gets called when the user double-Clicks a File in the File-Tree
     * Takes care that the File is a valid Game-Object
     * Tries to load the Map
     */
    private void treeLoad() {
        DefaultMutableTreeNode t = ((DefaultMutableTreeNode) Tree.getLastSelectedPathComponent());
        FileUtil f = (FileUtil) t.getUserObject();
        File file = f.path;
        if (file.isDirectory()) {
            return;
        }
        int i = file.getPath().lastIndexOf('.');
        String extension = "";
        if (i > 0) {
            extension = file.getPath().substring(i + 1);
        }
        if (!extension.equals("she")) {
            return;
        }
        loadMap(Serialize.xStreamIn(MapEditor.class, file));
        System.out.println("You selected " + f.path);
    }
    /**
     * Loads the given Map and adds it to the GUI
     * Removes the old Map
     * @param m The new Map to be added to the GUI
     */
    private void loadMap(MapEditor m) {
        m.play(false);
        m.addMouseListener(new java.awt.event.MouseAdapter() {
            @Override
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                map1MouseClicked(evt);
            }
        });
        Dimension d = GUI.getSize();
        Point p = GUI.getLocation();
        jDesktopPane2.remove(GUI);
        map1.build();
        map1 = m;
        map1.build();
        map1.repaint();
        JInternalFrame f = new JInternalFrame("GUI", true, false, true);
        f.add(map1);
        GUI = f;
        GUI.setBounds(300, 300, 400, 400);
        GUI.setSize(d);
        GUI.setLocation(p);
        jDesktopPane2.add(GUI);
        GUI.setVisible(true);
        this.update();
        map1.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(255, 51, 51), 1, true));
        map1.setPreferredSize(map1.getDimension());
        System.out.println("Map added");
    }
}
