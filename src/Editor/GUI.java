/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Editor;

import Events.Event;
import Game.Spot;
import Game.Tested;
import IOUtil.Serialize;
import Inventory.Items;
import Moveable.Enemies.Enemie;
import java.awt.Dimension;
import java.awt.Point;
import java.awt.event.MouseEvent;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JInternalFrame;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileFilter;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *
 * @author Flo
 */
public class GUI extends javax.swing.JFrame {
    //Spot spot;
    //Event evt;
    //Enemie e;
    //Items item;
    public static final int EVENTS = 1, ENEMIES = 2, ITEMS = 3, SPOTS = 0;
    int selection = SPOTS;
    //HashMap<JLabel, Spot> spots;
    //HashMap<JLabel, Event> events;
    //HashMap<JLabel, Enemie> enemies;
    //LinkedList<Items> items;
    /**
     * Creates new form GUI
     */
    public GUI() {
        initComponents();
        //spots = new HashMap<JLabel, Spot>();
       // events = new HashMap<JLabel, Event>();
        //enemies = new HashMap<JLabel, Enemie>();
        //items = new LinkedList<Items>();
        setUP();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jDesktopPane2 = new javax.swing.JDesktopPane();
        Content = new javax.swing.JInternalFrame();
        Tab = new javax.swing.JTabbedPane();
        Spots = new Editor.Content<Spot>();
        jButton5 = new javax.swing.JButton();
        Events = new Editor.Content<Event>();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        Enemies = new Editor.Content<Enemie>();
        jButton6 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        Items = new Editor.Content<Items>();
        jButton7 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        LaunchTab = new javax.swing.JInternalFrame();
        Launch = new javax.swing.JButton();
        GUI = new javax.swing.JInternalFrame();
        map1 = new Editor.MapEditor();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenuItem6 = new javax.swing.JMenuItem();
        jMenuItem4 = new javax.swing.JMenuItem();
        jMenuItem8 = new javax.swing.JMenuItem();
        jMenuItem5 = new javax.swing.JMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem7 = new javax.swing.JMenuItem();
        jMenu3 = new javax.swing.JMenu();
        jCheckBoxMenuItem1 = new javax.swing.JCheckBoxMenuItem();
        jCheckBoxMenuItem2 = new javax.swing.JCheckBoxMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        Content.setClosable(true);
        Content.setDefaultCloseOperation(javax.swing.WindowConstants.HIDE_ON_CLOSE);
        Content.setMaximizable(true);
        Content.setResizable(true);
        Content.setTitle("Content");
        Content.setVisible(true);

        Tab.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                TabStateChanged(evt);
            }
        });

        jButton5.setText("New");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });
        Spots.add(jButton5);

        Tab.addTab("Spots", Spots);

        jButton1.setText("New");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        Events.add(jButton1);

        jButton2.setText("Erase");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        Events.add(jButton2);

        Tab.addTab("Events", Events);

        jButton6.setText("New");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });
        Enemies.add(jButton6);

        jButton4.setText("Erase");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });
        Enemies.add(jButton4);

        Tab.addTab("Enemies", Enemies);

        jButton7.setText("New");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });
        Items.add(jButton7);

        jButton3.setText("Erase");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        Items.add(jButton3);

        Tab.addTab("Items", Items);

        javax.swing.GroupLayout ContentLayout = new javax.swing.GroupLayout(Content.getContentPane());
        Content.getContentPane().setLayout(ContentLayout);
        ContentLayout.setHorizontalGroup(
            ContentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(Tab, javax.swing.GroupLayout.DEFAULT_SIZE, 154, Short.MAX_VALUE)
        );
        ContentLayout.setVerticalGroup(
            ContentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(Tab, javax.swing.GroupLayout.DEFAULT_SIZE, 221, Short.MAX_VALUE)
        );

        Content.setBounds(30, 160, 170, 250);
        jDesktopPane2.add(Content, javax.swing.JLayeredPane.DEFAULT_LAYER);

        LaunchTab.setClosable(true);
        LaunchTab.setDefaultCloseOperation(javax.swing.WindowConstants.HIDE_ON_CLOSE);
        LaunchTab.setTitle("LAUNCH");
        LaunchTab.setVisible(true);

        Launch.setBackground(new java.awt.Color(255, 255, 51));
        Launch.setFont(new java.awt.Font("Arial Black", 1, 48)); // NOI18N
        Launch.setForeground(new java.awt.Color(255, 102, 102));
        Launch.setText("!LAUNCH!");
        Launch.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        Launch.setDebugGraphicsOptions(javax.swing.DebugGraphics.NONE_OPTION);
        Launch.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentHidden(java.awt.event.ComponentEvent evt) {
                LaunchComponentHidden(evt);
            }
        });
        Launch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LaunchActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout LaunchTabLayout = new javax.swing.GroupLayout(LaunchTab.getContentPane());
        LaunchTab.getContentPane().setLayout(LaunchTabLayout);
        LaunchTabLayout.setHorizontalGroup(
            LaunchTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(Launch, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        LaunchTabLayout.setVerticalGroup(
            LaunchTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(Launch, javax.swing.GroupLayout.DEFAULT_SIZE, 81, Short.MAX_VALUE)
        );

        LaunchTab.setBounds(160, 40, 331, 110);
        jDesktopPane2.add(LaunchTab, javax.swing.JLayeredPane.DEFAULT_LAYER);

        GUI.setResizable(true);
        GUI.setTitle("GUI");
        GUI.setVisible(true);

        map1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                map1MouseClicked(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                map1MousePressed(evt);
            }
        });

        javax.swing.GroupLayout GUILayout = new javax.swing.GroupLayout(GUI.getContentPane());
        GUI.getContentPane().setLayout(GUILayout);
        GUILayout.setHorizontalGroup(
            GUILayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(map1, javax.swing.GroupLayout.DEFAULT_SIZE, 424, Short.MAX_VALUE)
        );
        GUILayout.setVerticalGroup(
            GUILayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(map1, javax.swing.GroupLayout.DEFAULT_SIZE, 391, Short.MAX_VALUE)
        );

        GUI.setBounds(280, 160, 440, 420);
        jDesktopPane2.add(GUI, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jMenu1.setText("File");

        jMenuItem2.setText("Open");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem2);

        jMenuItem6.setText("Load Map");
        jMenuItem6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem6ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem6);

        jMenuItem4.setText("Save");
        jMenu1.add(jMenuItem4);

        jMenuItem8.setText("Save Map");
        jMenuItem8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem8ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem8);

        jMenuItem5.setText("New");
        jMenu1.add(jMenuItem5);

        jMenuItem3.setText("Close");
        jMenu1.add(jMenuItem3);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");

        jMenuItem1.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Z, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem1.setText("Undo");
        jMenu2.add(jMenuItem1);

        jMenuItem7.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Y, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem7.setText("Redo");
        jMenu2.add(jMenuItem7);

        jMenuBar1.add(jMenu2);

        jMenu3.setText("View");

        jCheckBoxMenuItem1.setSelected(true);
        jCheckBoxMenuItem1.setText("Launch");
        jCheckBoxMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxMenuItem1ActionPerformed(evt);
            }
        });
        jMenu3.add(jCheckBoxMenuItem1);

        jCheckBoxMenuItem2.setSelected(true);
        jCheckBoxMenuItem2.setText("Content");
        jCheckBoxMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxMenuItem2ActionPerformed(evt);
            }
        });
        jMenu3.add(jCheckBoxMenuItem2);

        jMenuBar1.add(jMenu3);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jDesktopPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 759, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jDesktopPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 587, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void map1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_map1MouseClicked
        //map1.click(evt,spot);
        System.out.println("Worked");
        mapCklicked(evt);
    }//GEN-LAST:event_map1MouseClicked

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        // TODO add your handling code here:
        String[] options = {"Create new Object","Choose File"};
        int option = JOptionPane.showOptionDialog(null, "How to create the Object?", "Choose Object", 0, JOptionPane.QUESTION_MESSAGE, null, options,0 );
        if (option != JOptionPane.CLOSED_OPTION) {
            if(option == 0) {
                Spot spot= null;
                final NewSpot s = new NewSpot(null, true);
                s.setVisible(true);
                 s.addComponentListener(new java.awt.event.ComponentAdapter() {
                    @Override
                    public void componentHidden(java.awt.event.ComponentEvent evt) {
                        Spots.add(s.getSpot());
                        s.dispose();
                    }
                });
            }
            
            else {
                Spot s= getObject(Spot.class, "Choose Spot");
                if (s == null) return;
                Spots.add(s);
            }
        }
    }//GEN-LAST:event_jButton5ActionPerformed

    private void TabStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_TabStateChanged
        selection = Tab.getSelectedIndex();
        System.out.println(selection);
    }//GEN-LAST:event_TabStateChanged

    private void map1MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_map1MousePressed
       // map1MouseClicked(evt);
    }//GEN-LAST:event_map1MousePressed

    private void LaunchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LaunchActionPerformed
        launch();
    }//GEN-LAST:event_LaunchActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        close();
    }//GEN-LAST:event_formWindowClosing

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        String[] options = {"Create new Object","Choose File"};
        int option = JOptionPane.showOptionDialog(null, "How to create the Object?", "Choose Object", 0, JOptionPane.QUESTION_MESSAGE, null, options,0 );
        if (option != JOptionPane.CLOSED_OPTION) {
            if(option == 0) {
                    Event event= null;
                final NewEvent i = new NewEvent(null, true,Items,Enemies);
                i.setVisible(true);
                 i.addComponentListener(new java.awt.event.ComponentAdapter() {
                    @Override
                    public void componentHidden(java.awt.event.ComponentEvent evt) {
                        Events.add(i.getEvent());
                        i.dispose();
                    }
                });
                 
                 Tab.add(Items, "Items",ITEMS);
                 Tab.add(Enemies, "Enemies",ENEMIES);
            }
            else {
                Event s= getObject(Event.class, "Choose Event");
                if (s == null) return;
                Events.add(s);
            }
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        String[] options = {"Create new Object","Choose File"};
        int option = JOptionPane.showOptionDialog(null, "How to create the Object?", "Choose Object", 0, JOptionPane.QUESTION_MESSAGE, null, options,0 );
        if (option != JOptionPane.CLOSED_OPTION) {
            if(option == 0) {
                Items item= null;
                final NewItem i = new NewItem(null, true);
                i.setVisible(true);
                 i.addComponentListener(new java.awt.event.ComponentAdapter() {
                    @Override
                    public void componentHidden(java.awt.event.ComponentEvent evt) {
                        Items.add(i.getItem());
                        i.dispose();
                    }
                });
            }
            else {
                Items s= getObject(Items.class, "Choose Item");
                if (s == null) return;
                Items.add(s);
            }
        }
    }//GEN-LAST:event_jButton7ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        String[] options = {"Create new Object","Choose File"};
        int option = JOptionPane.showOptionDialog(null, "How to create the Object?", "Choose Object", 0, JOptionPane.QUESTION_MESSAGE, null, options,0 );
        if (option != JOptionPane.CLOSED_OPTION) {
            if(option == 0) {
                Enemie enemie= null;
                final NewEnemie i = new NewEnemie(null, true);
                i.setVisible(true);
                 i.addComponentListener(new java.awt.event.ComponentAdapter() {
                    @Override
                    public void componentHidden(java.awt.event.ComponentEvent evt) {
                        Enemies.add(i.getEnemie());
                        i.dispose();
                    }
                });
            }
            else {
                Enemie s= getObject(Enemie.class, "Choose Enemie");
                if (s == null) return;
                Enemies.add(s);
            }
        }
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        Enemies.erase();
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        Items.erase();
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        Events.erase();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void LaunchComponentHidden(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_LaunchComponentHidden
        
    }//GEN-LAST:event_LaunchComponentHidden

    private void jMenuItem6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem6ActionPerformed
        final MapEditor m = getObject(MapEditor.class, "Load Map");
        if (m == null) return;
        m.play(false);
         m.addMouseListener(new java.awt.event.MouseAdapter() {
            @Override
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                map1MouseClicked(evt);
            }
        });
         Dimension d = GUI.getSize();
         Point p = GUI.getLocation();
         jDesktopPane2.remove(GUI);
         map1.build();
         map1 = m;
         map1.build();
         //GUI.remove(map1);
         //GUI.removeAll();
         //GUI.add(map1);
         map1.repaint();
         //map1.setVisible(false);
         //map1.setVisible(true);
         //GUI.removeAll();
         //GUI.add(m);
        JInternalFrame f = new JInternalFrame("GUI", true, false, true);
        f.add(map1);
        GUI = f;
//        
//        //m.setBounds(0, 0, 300, 300);
        GUI.setBounds(300, 300, 400, 400);
        GUI.setSize(d);
        GUI.setLocation(p);
        jDesktopPane2.add(GUI);
        GUI.setVisible(true);
        //GUI = f;
        this.update();
        System.out.println("Map added");
    }//GEN-LAST:event_jMenuItem6ActionPerformed

    private void jMenuItem8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem8ActionPerformed
        Spots.save(map1);
    }//GEN-LAST:event_jMenuItem8ActionPerformed

    private void jCheckBoxMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxMenuItem1ActionPerformed
        LaunchTab.setVisible(!LaunchTab.isVisible());
    }//GEN-LAST:event_jCheckBoxMenuItem1ActionPerformed

    private void jCheckBoxMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxMenuItem2ActionPerformed
       Content.setVisible(!Content.isVisible());
    }//GEN-LAST:event_jCheckBoxMenuItem2ActionPerformed
    private void mapMouseClicked(java.awt.event.MouseEvent evt, MapEditor m) {                                  
        //map1.click(evt,spot);
        System.out.println("Worked");
        mapCklicked(evt);
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GUI().setVisible(true);
                
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JInternalFrame Content;
    private Editor.Content<Enemie> Enemies;
    private Editor.Content<Event> Events;
    private javax.swing.JInternalFrame GUI;
    private Editor.Content<Items> Items;
    private javax.swing.JButton Launch;
    private javax.swing.JInternalFrame LaunchTab;
    private Editor.Content<Spot> Spots;
    private javax.swing.JTabbedPane Tab;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItem1;
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItem2;
    private javax.swing.JDesktopPane jDesktopPane2;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JMenuItem jMenuItem6;
    private javax.swing.JMenuItem jMenuItem7;
    private javax.swing.JMenuItem jMenuItem8;
    private Editor.MapEditor map1;
    // End of variables declaration//GEN-END:variables
public final void setUP() {
        try {
            map1.setUP(10, 10, 5, 5);

            BufferedImage before = ImageIO.read (this.getClass().
                getResource("/Pictures/tile1.png"));
            Spot s = new Spot(before, true);
            map1.setAllSpots(s);
            map1.build();
        } catch (IOException ex) {
            Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
        }
}
private File getFile(String selection, String extension, String description) {
        //Player player;
        //Map map;
        JFileChooser chooser;
        //Map map;
        File f=new File("Content/");
        //URL u = new URL(f.getAbsolutePath());
        //URL u = (this.getClass().getResource("/pictures"));
    
        chooser = new JFileChooser(f);
        
        FileFilter filter;
        //if (textFile) {
            //filter = new FileNameExtensionFilter(description, extension);
        //}
//        else {
            filter = new FileNameExtensionFilter("Game-File   .she", "she");
//        }
        chooser.addChoosableFileFilter(filter);
        
        int choosed = chooser.showDialog(null, selection);
        //if (chooser.getSelectedFile() != null)
        return chooser.getSelectedFile();
        
    }
    public <T> T getObject(Class<T> data, String file) {
        T clazz;
        File f= getFile(file, "SuperHarz ENT.   .she", "she");
        if (f == null) return null;
        clazz = Serialize.xStreamIn(data, f);
        return clazz;
    }
    private void update() {
        Spots.validate();
        Spots.repaint();
        map1.validate();
        map1.repaint();
        this.validate();
        this.repaint();
        jDesktopPane2.validate();
        jDesktopPane2.repaint();
        GUI.validate();
        GUI.repaint();
    }
//    private void SpotMousePressed(java.awt.event.MouseEvent evt) {
//        JLabel l = (JLabel)evt.getComponent();
//        Spot help = spots.get(l);
//        if (spot != null && spot != help) {
//            spots.
//            l.setBorder(null);
//        }
//        spot = spots.get(l);   
//        l.setBorder(BorderFactory.createEtchedBorder(Color.lightGray, Color.yellow));
//        System.out.println("HI");
//        
//    //table.get(l).setVisible(true);
//}

    private void mapCklicked(MouseEvent evt) {
        System.out.println("Selection: "+selection);
        switch (selection) {
            case EVENTS : map1.click(evt, Events.getContent(),EVENTS);break;
            case ENEMIES: map1.click(evt, Enemies.getContent(), ENEMIES);break;
            case ITEMS  : map1.click(evt, Items.getContent(), ITEMS);break;
            case SPOTS  : map1.click(evt, Spots.getContent(), SPOTS);break;
        }
        update();
    }
    private void mapCklicked(MouseEvent evt, MapEditor map) {
        switch (selection) {
            case EVENTS : map.click(evt, Events.getContent(),EVENTS);break;
            case ENEMIES: map.click(evt, Enemies.getContent(), ENEMIES);break;
            case ITEMS  : map.click(evt, Items.getContent(), ITEMS);break;
            case SPOTS  : map.click(evt, Spots.getContent(), SPOTS);break;
        }
        update();
    }

    private void launch() {
        Serialize.xStreamOut(map1, "Save\\temp.she");
        Tested test = new Tested("Save\\temp.she");
        test.setVisible(true);
        test.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
    }

    private void close() {
        try{
 
    		File file = new File("Save\\temp.she");
 
    		if(file.delete()){
    			System.out.println(file.getName() + " is deleted!");
    		}else{
    			System.out.println("Delete operation is failed.");
    		}
 
    	}catch(Exception e){
            System.out.println(e.getMessage());
    	}
    }

}
